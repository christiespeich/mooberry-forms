<?php
class MOOBD_Repeater_Field extends MOOBD_Field {
	
	protected $fields;
	protected $values;
	protected $add_text;
	protected $delete_text;
	protected $add_button_classes;
	protected $inline;
	protected $inner_repeater;
	
	public function __construct( $id, $prefix ) {
		
		parent::__construct( $id, $prefix );

		$this->fields = array();
		$this->values = array();
		$this->add_text = 	__('Add', 'mooberry-front-end-forms');
		$this->delete_text = __('Delete', 'mooberry-front-end-forms');
		$this->add_button_classes	=	array();
		$this->inline = false;

		$this->fields[] = MOOBD_Field_Factory::create_field( 'hidden', 'unique_id' );

		$this->classes[] = $this->prefix . 'field-repeater';
		$this->inner_repeater = false;

		
	}

	public function set_add_text( $value ) {
		$this->add_text = $value;
	}

	public function set_delete_text( $value ) {
		$this->delete_text = $value;
	}

	public function set_inner_repeater( $value ) {
		$this->inner_repeater = $value;
	}

	public function set_inline( $value ) {
		$this->inline = $value;
	}

	public function set_value( $value ) {
		parent::set_value( $value ); // TODO: Change the autogenerated stub
        wp_localize_script( 'moob-forms-repeater', 'repeater_data', maybe_unserialize( $value ) );
	}

	public function add_field( MOOBD_Field $field ) {
	    $this->fields[ $field->get_id() ] = $field;
	}
	
	protected function render_field( $object_id ) {
	    if ( $this->inner_repeater ) {
		    $class = 'inner-repeater';
	    } else {
		    $class = 'repeater';
	    }
			?>
               <div class="<?php echo esc_attr($class); ?>">
	  <div data-repeater-list="<?php echo esc_attr($this->id); ?>" class="<?php echo implode(' ', $this->classes); ?>">
	  <?php 
	 /* if ( is_array( $this->value ) && count($this->value) > 0  && $this->value[0] != '' ) {
			$this->values = unserialize( $this->value[0] );
		}*/
	 //$this->values = $this->value;
        $values = maybe_unserialize( $this->value );
	  if ( !is_array($values) ) {
		  $values = array($values);
	  }
	   if ( count($values) == 0 ) {
		  foreach ( $this->fields as $field ) {
				$values[0][ $field->id ] = '';
				
		  }
	  } 
	  $counter = 0;

	  foreach ( $values as $row ) {

		  if ( !is_array( $row ) ) {
			  $row = array( $row );
		  }
		  do_action('mfef-before-repeater-item', $this, $counter );
		  echo '<div data-repeater-item class="repeater-item"> ';
		   do_action('mfef-before-first-repeater-field', $this, $counter );
		  $counter++;
		  
		  foreach ( $this->fields as $field ) { 		  
				$value = null;
				$field_id = $field->get_id();
				if ( array_key_exists( $field_id, $row ) ) {
					$field->value = $row[ $field_id ];
				}
				if ( $this->inline ) {
					$field->add_class( 'moobd-forms-show-inline' );
					$delete_button_class = 'image';
			        $button_text = '';
				} else {
					$field->add_class( 'moobd-forms-show-block' );
					$delete_button_class = 'button';
			        $button_text = $this->delete_text;
				}
				$field->render( $object_id );
		  }
		    do_action('mfef-after-last-repeater-field', $this, $counter );

				?>
				<input data-repeater-delete type="button" class="repeater-delete-button repeater-delete-button-<?php echo esc_attr($this->id); ?> <?php echo esc_attr('repeater-delete-button-' . $delete_button_class); ?>" value="<?php echo esc_attr( $button_text ); ?>" />
          <?php
          do_action( 'mfef-after-repeater-delete-button', $this, $counter );
          ?>
				
			  </div>
		  <?php 
	}
	  
	  ?>
		</div>
		<input data-repeater-create type="button" value="<?php echo esc_attr($this->add_text); ?>" class="btn btn-primary btn-sm repeater-add-button repeater-add-button-<?php echo esc_attr($this->id); ?> <?php echo implode(' ', $this->add_button_classes); ?>"/>
        </div>
		<?php
	}

	public function sanitize( $values ) {
		$sanitized_values = array();
		foreach ( $values as $row ) {
			$sanitized_fields = array();
			foreach ( $this->fields as $field ) {

				if ( array_key_exists( $field->id, $row ) ) {
					// if it's the uniqueID, generate one
					if ( $field->id == 'unique_id' && $row[ $field->id ] == '') {

						$row[$field->id] = uniqid();

					}
					$sanitized_fields[$field->id] = $field->sanitize( $row[ $field->id ]);
				}
			}
			$sanitized_values[] = $sanitized_fields;
		}

	    $this->values = $sanitized_values;
		return $sanitized_values;
	}

	public function validate() {
		// TODO: Implement validate() method.
	}

	/*
	public function sanitize( $values ) {
	
		$sanitized_values = array();
		foreach ( $values as $row ) {
			$sanitized_fields = array();
			foreach ( $this->fields as $field ) {
				
				if ( array_key_exists( $field->id, $row ) ) {
					// if it's the uniqueID, generate one
					if ( $field->id == 'unique_id' && $row[ $field->id ] == '') {
						
						$row[$field->id] = mfef_get_unique_id();
						
					}
					$sanitized_fields[$field->id] = $field->sanitize( $row[ $field->id ]);
				}
			}
			$sanitized_values[] = $sanitized_fields;
		}			
	
	$this->values = $sanitized_values;
		return $sanitized_values;			
	}
	
	// return array of messages
	public function validate() {
		$message = array();
		foreach ( $this->fields as $key => $field ) {
			
			if ( !$field->validate() ) {
				$this->fields[ $key ]->classes[] = 'missing';
				$message[] = $field->label. ' is required.';
			}
		}
		if ( count($message) > 0 ) {
			return $message;
		} else {
			return true;
		}
	}*/
}
